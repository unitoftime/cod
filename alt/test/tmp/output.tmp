
func (t AAA)EncodeCod(bs []byte) []byte {

bs = backend.WriteUint8(bs, (t))

return bs
}

func (t *AAA)DecodeCod(bs []byte) (int, error) {
var err error
var n int
var nOff int


{
var decoded AAA
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t = (decoded)
}


return n, err
}

func (t Person)EncodeCod(bs []byte) []byte {

bs = backend.WriteString(bs, (t.Name))

bs = backend.WriteUint8(bs, (t.Age))

bs = backend.WriteVarUint16(bs, (t.Id.Val))

{
for i := range t.Array {
   
bs = backend.WriteVarUint16(bs, (t.Array[i]))

}
}
{
bs = backend.WriteVarUint64(bs, uint64(len(t.Slice)))
for i := range t.Slice {
   
bs = backend.WriteVarUint32(bs, (t.Slice[i]))

}
}
{
bs = backend.WriteVarUint64(bs, uint64(len(t.DoubleSlice)))
for i := range t.DoubleSlice {
   
{
bs = backend.WriteVarUint64(bs, uint64(len(t.DoubleSlice[i])))
for i := range t.DoubleSlice[i] {
   
bs = backend.WriteUint8(bs, (t.DoubleSlice[i][i]))

}
}
}
}
return bs
}

func (t *Person)DecodeCod(bs []byte) (int, error) {
var err error
var n int
var nOff int


{
var decoded string
decoded, nOff, err = backend.ReadString(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Name = (decoded)
}

{
var decoded uint8
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Age = (decoded)
}

{
var decoded uint16
decoded, nOff, err = backend.ReadVarUint16(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Id.Val = (decoded)
}

{
for i := range t.Array {
   
{
var decoded uint16
decoded, nOff, err = backend.ReadVarUint16(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Array[i] = (decoded)
}


   if err != nil {
      return 0, err
   }
}
}
{
  var length uint64
	length, nOff, err = backend.ReadVarUint64(bs[n:])
	if err != nil { return 0, err }
  n += nOff

for i := 0; i < int(length); i++ {
   var decoded 
   
{
var decoded uint32
decoded, nOff, err = backend.ReadVarUint32(bs[n:])
if err != nil { return 0, err }
n += nOff
decoded = (decoded)
}

   if err != nil {
      return 0, err
   }

   t.Slice = append(t.Slice, decoded)
}
}
{
  var length uint64
	length, nOff, err = backend.ReadVarUint64(bs[n:])
	if err != nil { return 0, err }
  n += nOff

for i := 0; i < int(length); i++ {
   var decoded 
   
{
  var length uint64
	length, nOff, err = backend.ReadVarUint64(bs[n:])
	if err != nil { return 0, err }
  n += nOff

for i := 0; i < int(length); i++ {
   var decoded 
   
{
var decoded uint8
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
decoded = (decoded)
}

   if err != nil {
      return 0, err
   }

   decoded = append(decoded, decoded)
}
}
   if err != nil {
      return 0, err
   }

   t.DoubleSlice = append(t.DoubleSlice, decoded)
}
}

return n, err
}

func (t Type1)EncodeCod(bs []byte) []byte {

bs = backend.WriteUint8(bs, (t))

return bs
}

func (t *Type1)DecodeCod(bs []byte) (int, error) {
var err error
var n int
var nOff int


{
var decoded Type1
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t = (decoded)
}


return n, err
}

func (t Type2)EncodeCod(bs []byte) []byte {

bs = backend.WriteUint8(bs, (t))

return bs
}

func (t *Type2)DecodeCod(bs []byte) (int, error) {
var err error
var n int
var nOff int


{
var decoded Type2
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t = (decoded)
}


return n, err
}

func (t Type3)EncodeCod(bs []byte) []byte {

bs = backend.WriteUint8(bs, (t.Type1))

bs = backend.WriteUint8(bs, (t.Type2))

bs = backend.WriteUint8(bs, (t.T1))

bs = backend.WriteUint8(bs, (t.T2))

bs = backend.WriteUint8(bs, (t.Val))

bs = backend.WriteUint8(bs, (t.anonymous))

bs = backend.WriteFloat64(bs, (t.Pos.X))

bs = backend.WriteFloat64(bs, (t.Pos.Y))

{
for i := range t.Array {
   
bs = backend.WriteUint8(bs, (t.Array[i]))

}
}
{
bs = backend.WriteVarUint64(bs, uint64(len(t.Slice)))
for i := range t.Slice {
   
bs = backend.WriteVarUint64(bs, (t.Slice[i]))

}
}
{
bs = backend.WriteVarUint64(bs, uint64(len(t.DubSlice)))
for i := range t.DubSlice {
   
{
bs = backend.WriteVarUint64(bs, uint64(len(t.DubSlice[i])))
for i := range t.DubSlice[i] {
   
bs = backend.WriteVarUint32(bs, (t.DubSlice[i][i]))

}
}
}
}
bs = backend.WriteVarUint16(bs, (t.Embedded.Val))

return bs
}

func (t *Type3)DecodeCod(bs []byte) (int, error) {
var err error
var n int
var nOff int


{
var decoded Type1
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Type1 = (decoded)
}

{
var decoded Type2
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Type2 = (decoded)
}

{
var decoded Type1
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.T1 = (decoded)
}

{
var decoded Type2
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.T2 = (decoded)
}

{
var decoded uint8
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Val = (decoded)
}

{
var decoded uint8
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.anonymous = (decoded)
}

{
var decoded float64
decoded, nOff, err = backend.ReadFloat64(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Pos.X = (decoded)
}

{
var decoded float64
decoded, nOff, err = backend.ReadFloat64(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Pos.Y = (decoded)
}

{
for i := range t.Array {
   
{
var decoded uint8
decoded, nOff, err = backend.ReadUint8(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Array[i] = (decoded)
}


   if err != nil {
      return 0, err
   }
}
}
{
  var length uint64
	length, nOff, err = backend.ReadVarUint64(bs[n:])
	if err != nil { return 0, err }
  n += nOff

for i := 0; i < int(length); i++ {
   var decoded 
   
{
var decoded uint64
decoded, nOff, err = backend.ReadVarUint64(bs[n:])
if err != nil { return 0, err }
n += nOff
decoded = (decoded)
}

   if err != nil {
      return 0, err
   }

   t.Slice = append(t.Slice, decoded)
}
}
{
  var length uint64
	length, nOff, err = backend.ReadVarUint64(bs[n:])
	if err != nil { return 0, err }
  n += nOff

for i := 0; i < int(length); i++ {
   var decoded 
   
{
  var length uint64
	length, nOff, err = backend.ReadVarUint64(bs[n:])
	if err != nil { return 0, err }
  n += nOff

for i := 0; i < int(length); i++ {
   var decoded 
   
{
var decoded uint32
decoded, nOff, err = backend.ReadVarUint32(bs[n:])
if err != nil { return 0, err }
n += nOff
decoded = (decoded)
}

   if err != nil {
      return 0, err
   }

   decoded = append(decoded, decoded)
}
}
   if err != nil {
      return 0, err
   }

   t.DubSlice = append(t.DubSlice, decoded)
}
}
{
var decoded uint16
decoded, nOff, err = backend.ReadVarUint16(bs[n:])
if err != nil { return 0, err }
n += nOff
t.Embedded.Val = (decoded)
}


return n, err
}

func (t Type4)EncodeCod(bs []byte) []byte {

return bs
}

func (t *Type4)DecodeCod(bs []byte) (int, error) {
var err error
var n int
var nOff int



return n, err
}
